// Code generated by MockGen. DO NOT EDIT.
// Source: embedded/server.go
//
// Generated by this command:
//
//	mockgen -source embedded/server.go -destination embedded/notifymock/server_mock.go -package notifymock Notifier
//

// Package notifymock is a generated GoMock package.
package notifymock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Drain mocks base method.
func (m *MockNotifier) Drain() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drain indicates an expected call of Drain.
func (mr *MockNotifierMockRecorder) Drain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockNotifier)(nil).Drain))
}

// Publish mocks base method.
func (m *MockNotifier) Publish(subject string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", subject, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNotifierMockRecorder) Publish(subject, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotifier)(nil).Publish), subject, data)
}
