// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go
//
// Generated by this command:
//
//	mockgen -source service/service.go -destination service/svcmock/service_mock.go -package svcmock Servicer
//

// Package svcmock is a generated GoMock package.
package svcmock

import (
	repository "gounread/repository"
	service "gounread/service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetRecentMessages mocks base method.
func (m *MockMessage) GetRecentMessages(roomID string, limit int) ([]*repository.GetRecentMessagesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentMessages", roomID, limit)
	ret0, _ := ret[0].([]*repository.GetRecentMessagesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentMessages indicates an expected call of GetRecentMessages.
func (mr *MockMessageMockRecorder) GetRecentMessages(roomID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentMessages", reflect.TypeOf((*MockMessage)(nil).GetRecentMessages), roomID, limit)
}

// ReadMessage mocks base method.
func (m *MockMessage) ReadMessage(roomID, userID string) ([]*repository.GetMessagesByRoomIDAndTimeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", roomID, userID)
	ret0, _ := ret[0].([]*repository.GetMessagesByRoomIDAndTimeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockMessageMockRecorder) ReadMessage(roomID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockMessage)(nil).ReadMessage), roomID, userID)
}

// SendMessage mocks base method.
func (m *MockMessage) SendMessage(param *service.SendMessageParam) (*service.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", param)
	ret0, _ := ret[0].(*service.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageMockRecorder) SendMessage(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessage)(nil).SendMessage), param)
}

// MockRoom is a mock of Room interface.
type MockRoom struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMockRecorder
}

// MockRoomMockRecorder is the mock recorder for MockRoom.
type MockRoomMockRecorder struct {
	mock *MockRoom
}

// NewMockRoom creates a new mock instance.
func NewMockRoom(ctrl *gomock.Controller) *MockRoom {
	mock := &MockRoom{ctrl: ctrl}
	mock.recorder = &MockRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoom) EXPECT() *MockRoomMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoom) CreateRoom(users []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomMockRecorder) CreateRoom(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoom)(nil).CreateRoom), users)
}

// GetRoomsByUserID mocks base method.
func (m *MockRoom) GetRoomsByUserID(userID string) ([]*repository.GetRoomsByUserIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsByUserID", userID)
	ret0, _ := ret[0].([]*repository.GetRoomsByUserIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsByUserID indicates an expected call of GetRoomsByUserID.
func (mr *MockRoomMockRecorder) GetRoomsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsByUserID", reflect.TypeOf((*MockRoom)(nil).GetRoomsByUserID), userID)
}

// ListRoomsByUserID mocks base method.
func (m *MockRoom) ListRoomsByUserID(userID string) ([]*service.ListRoomsByUserIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomsByUserID", userID)
	ret0, _ := ret[0].([]*service.ListRoomsByUserIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomsByUserID indicates an expected call of ListRoomsByUserID.
func (mr *MockRoomMockRecorder) ListRoomsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsByUserID", reflect.TypeOf((*MockRoom)(nil).ListRoomsByUserID), userID)
}

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockServicer) CreateRoom(users []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockServicerMockRecorder) CreateRoom(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockServicer)(nil).CreateRoom), users)
}

// GetRecentMessages mocks base method.
func (m *MockServicer) GetRecentMessages(roomID string, limit int) ([]*repository.GetRecentMessagesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentMessages", roomID, limit)
	ret0, _ := ret[0].([]*repository.GetRecentMessagesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentMessages indicates an expected call of GetRecentMessages.
func (mr *MockServicerMockRecorder) GetRecentMessages(roomID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentMessages", reflect.TypeOf((*MockServicer)(nil).GetRecentMessages), roomID, limit)
}

// GetRoomsByUserID mocks base method.
func (m *MockServicer) GetRoomsByUserID(userID string) ([]*repository.GetRoomsByUserIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsByUserID", userID)
	ret0, _ := ret[0].([]*repository.GetRoomsByUserIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsByUserID indicates an expected call of GetRoomsByUserID.
func (mr *MockServicerMockRecorder) GetRoomsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsByUserID", reflect.TypeOf((*MockServicer)(nil).GetRoomsByUserID), userID)
}

// ListRoomsByUserID mocks base method.
func (m *MockServicer) ListRoomsByUserID(userID string) ([]*service.ListRoomsByUserIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomsByUserID", userID)
	ret0, _ := ret[0].([]*service.ListRoomsByUserIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomsByUserID indicates an expected call of ListRoomsByUserID.
func (mr *MockServicerMockRecorder) ListRoomsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsByUserID", reflect.TypeOf((*MockServicer)(nil).ListRoomsByUserID), userID)
}

// ReadMessage mocks base method.
func (m *MockServicer) ReadMessage(roomID, userID string) ([]*repository.GetMessagesByRoomIDAndTimeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", roomID, userID)
	ret0, _ := ret[0].([]*repository.GetMessagesByRoomIDAndTimeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockServicerMockRecorder) ReadMessage(roomID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockServicer)(nil).ReadMessage), roomID, userID)
}

// SendMessage mocks base method.
func (m *MockServicer) SendMessage(param *service.SendMessageParam) (*service.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", param)
	ret0, _ := ret[0].(*service.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServicerMockRecorder) SendMessage(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockServicer)(nil).SendMessage), param)
}
