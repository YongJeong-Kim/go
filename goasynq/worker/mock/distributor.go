// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/YongJeong-Kim/go/goasynq/worker (interfaces: Distributor)

// Package mockwk is a generated GoMock package.
package mockwk

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockDistributor is a mock of Distributor interface.
type MockDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockDistributorMockRecorder
}

// MockDistributorMockRecorder is the mock recorder for MockDistributor.
type MockDistributorMockRecorder struct {
	mock *MockDistributor
}

// NewMockDistributor creates a new mock instance.
func NewMockDistributor(ctrl *gomock.Controller) *MockDistributor {
	mock := &MockDistributor{ctrl: ctrl}
	mock.recorder = &MockDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributor) EXPECT() *MockDistributorMockRecorder {
	return m.recorder
}

// CreateUserTask mocks base method.
func (m *MockDistributor) CreateUserTask(arg0 context.Context, arg1 *asynq.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserTask indicates an expected call of CreateUserTask.
func (mr *MockDistributorMockRecorder) CreateUserTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTask", reflect.TypeOf((*MockDistributor)(nil).CreateUserTask), arg0, arg1)
}
